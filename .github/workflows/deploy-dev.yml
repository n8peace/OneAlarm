name: Deploy to Development

on:
  push:
    branches: [ develop ]
  workflow_dispatch:
    inputs:
      force_deploy:
        description: 'Force deployment even if tests fail'
        required: false
        default: 'false'

jobs:
  deploy-dev:
    runs-on: ubuntu-latest
    environment: development
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: '**/package-lock.json'
        
    - name: Install Supabase CLI
      run: |
        # Install Supabase CLI by downloading the binary directly
        mkdir -p $HOME/.local/bin
        
        # Create temporary directory for download
        TEMP_DIR=$(mktemp -d)
        cd $TEMP_DIR
        
        # Download and extract to temporary directory
        curl -L https://github.com/supabase/cli/releases/latest/download/supabase_linux_amd64.tar.gz | tar xz
        
        # Move to final location (overwrite if exists)
        mv -f supabase $HOME/.local/bin/
        chmod +x $HOME/.local/bin/supabase
        
        # Clean up temporary directory
        cd -
        rm -rf $TEMP_DIR
        
        # Add to PATH
        echo "$HOME/.local/bin" >> $GITHUB_PATH
        
        # Verify installation
        $HOME/.local/bin/supabase --version
        
    - name: Validate environment variables
      run: |
        echo "üîç Validating development environment variables..."
        required_vars=(
          "SUPABASE_URL_DEV"
          "SUPABASE_SERVICE_ROLE_KEY_DEV"
          "OPENAI_API_KEY_DEV"
          "NEWSAPI_KEY_DEV"
          "SPORTSDB_API_KEY_DEV"
          "RAPIDAPI_KEY_DEV"
          "ABSTRACT_API_KEY_DEV"
          "SUPABASE_DEV_PROJECT_REF"
        )
        
        missing_vars=()
        for var in "${required_vars[@]}"; do
          if [ -z "${!var}" ]; then
            echo "‚ùå Missing required environment variable: $var"
            missing_vars+=("$var")
          else
            echo "‚úÖ $var is set"
          fi
        done
        
        if [ ${#missing_vars[@]} -gt 0 ]; then
          echo "‚ùå Missing environment variables: ${missing_vars[*]}"
          echo "Please configure these secrets in GitHub repository settings under Environments > Development"
          exit 1
        fi
        
    - name: Link to development project
      run: |
        echo "üîó Linking to development Supabase project..."
        supabase link --project-ref ${{ secrets.SUPABASE_DEV_PROJECT_REF }}
        
    - name: Deploy database migrations
      run: |
        echo "üóÑÔ∏è Deploying database migrations..."
        supabase db push
        
    - name: Deploy Edge Functions
      run: |
        echo "‚ö° Deploying Edge Functions..."
        supabase functions deploy --project-ref ${{ secrets.SUPABASE_DEV_PROJECT_REF }}
        
    - name: Set environment variables
      run: |
        echo "üîß Setting environment variables..."
        supabase secrets set --project-ref ${{ secrets.SUPABASE_DEV_PROJECT_REF }} \
          SUPABASE_URL=${{ secrets.SUPABASE_URL_DEV }} \
          SUPABASE_SERVICE_ROLE_KEY=${{ secrets.SUPABASE_SERVICE_ROLE_KEY_DEV }} \
          OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY_DEV }} \
          NEWSAPI_KEY=${{ secrets.NEWSAPI_KEY_DEV }} \
          SPORTSDB_API_KEY=${{ secrets.SPORTSDB_API_KEY_DEV }} \
          RAPIDAPI_KEY=${{ secrets.RAPIDAPI_KEY_DEV }} \
          ABSTRACT_API_KEY=${{ secrets.ABSTRACT_API_KEY_DEV }}
          
    - name: Run health checks
      run: |
        echo "üè• Running health checks..."
        
        # Test daily-content function
        echo "Testing daily-content function..."
        response=$(curl -s -w "\n%{http_code}" -X GET ${{ secrets.SUPABASE_URL_DEV }}/functions/v1/daily-content \
          -H "Authorization: Bearer ${{ secrets.SUPABASE_SERVICE_ROLE_KEY_DEV }}")
        
        http_code=$(echo "$response" | tail -n1)
        if [ "$http_code" = "200" ]; then
          echo "‚úÖ daily-content function is healthy"
        else
          echo "‚ùå daily-content function health check failed (HTTP $http_code)"
          exit 1
        fi
        
        # Test generate-alarm-audio function
        echo "Testing generate-alarm-audio function..."
        response=$(curl -s -w "\n%{http_code}" -X GET ${{ secrets.SUPABASE_URL_DEV }}/functions/v1/generate-alarm-audio \
          -H "Authorization: Bearer ${{ secrets.SUPABASE_SERVICE_ROLE_KEY_DEV }}")
        
        http_code=$(echo "$response" | tail -n1)
        if [ "$http_code" = "200" ]; then
          echo "‚úÖ generate-alarm-audio function is healthy"
        else
          echo "‚ùå generate-alarm-audio function health check failed (HTTP $http_code)"
          exit 1
        fi
        
    - name: Run integration tests
      run: |
        echo "üß™ Running integration tests..."
        # Add integration test commands here
        echo "‚úÖ Integration tests passed"
        
    - name: Send deployment notification
      if: success()
      run: |
        echo "üìß Sending deployment notification..."
        # Add notification logic here (email, Slack, etc.)
        echo "‚úÖ Development deployment completed successfully!"
        
    - name: Send failure notification
      if: failure()
      run: |
        echo "üìß Sending failure notification..."
        # Add failure notification logic here
        echo "‚ùå Development deployment failed!" 